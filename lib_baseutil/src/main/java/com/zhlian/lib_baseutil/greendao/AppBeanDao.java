package com.zhlian.lib_baseutil.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhlian.lib_baseutil.AppBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_BEAN".
*/
public class AppBeanDao extends AbstractDao<AppBean, String> {

    public static final String TABLENAME = "APP_BEAN";

    /**
     * Properties of entity AppBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property PkgName = new Property(1, String.class, "pkgName", true, "PKG_NAME");
        public final static Property AppName = new Property(2, String.class, "appName", false, "APP_NAME");
        public final static Property Icon = new Property(3, byte[].class, "icon", false, "ICON");
        public final static Property IsInDeleteMode = new Property(4, boolean.class, "isInDeleteMode", false, "IS_IN_DELETE_MODE");
        public final static Property IsInSelectMode = new Property(5, boolean.class, "isInSelectMode", false, "IS_IN_SELECT_MODE");
    }


    public AppBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AppBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_BEAN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"PKG_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 1: pkgName
                "\"APP_NAME\" TEXT," + // 2: appName
                "\"ICON\" BLOB," + // 3: icon
                "\"IS_IN_DELETE_MODE\" INTEGER NOT NULL ," + // 4: isInDeleteMode
                "\"IS_IN_SELECT_MODE\" INTEGER NOT NULL );"); // 5: isInSelectMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(2, pkgName);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        byte[] icon = entity.getIcon();
        if (icon != null) {
            stmt.bindBlob(4, icon);
        }
        stmt.bindLong(5, entity.getIsInDeleteMode() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsInSelectMode() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(2, pkgName);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        byte[] icon = entity.getIcon();
        if (icon != null) {
            stmt.bindBlob(4, icon);
        }
        stmt.bindLong(5, entity.getIsInDeleteMode() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsInSelectMode() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public AppBean readEntity(Cursor cursor, int offset) {
        AppBean entity = new AppBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pkgName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appName
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // icon
            cursor.getShort(offset + 4) != 0, // isInDeleteMode
            cursor.getShort(offset + 5) != 0 // isInSelectMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPkgName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setIsInDeleteMode(cursor.getShort(offset + 4) != 0);
        entity.setIsInSelectMode(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(AppBean entity, long rowId) {
        return entity.getPkgName();
    }
    
    @Override
    public String getKey(AppBean entity) {
        if(entity != null) {
            return entity.getPkgName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppBean entity) {
        return entity.getPkgName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
